#cloud-config
users:
  - name: rancher
    groups:
      - sudo
      - docker
    passwd: "$1$8dsJz4sa$HkAZrM2n9dDJbrvo6g6r6."

write_files:
- path: "/opt/bin/python"
  permissions: 755
  owner: root:root
  content: |
    #!/bin/bash
    LD_LIBRARY_PATH=/opt/pypy/bin /opt/pypy/bin/pypy $@
- path: "/opt/bin/pip"
  permissions: 755
  owner: root:root
  content: |
    #!/bin/bash
    LD_LIBRARY_PATH=/opt/pypy/bin /opt/pypy/bin/pip $@
- path: "/opt/bin/pip2"
  permissions: 755
  owner: root:root
  content: |
    #!/bin/bash
    LD_LIBRARY_PATH=/opt/pypy/bin /opt/pypy/bin/pip2 $@
- path: "/etc/sysctl.d/10-disable-ipv6.conf"
  owner: root
  content: |
    net.ipv6.conf.all.disable_ipv6=1
    net.ipv6.conf.default.disable_ipv6=1
- path: "/etc/sysctl.d/ipv6.conf"
  content: |
    net.ipv6.conf.all.forwarding=1
- path: "/etc/sysctl.d/vmmax.conf"
  content: |
    vm.max_map_count=262144
- path: "/etc/systemd/system/docker.service.d/increase-ulimit.conf"
  owner: root:root
  permissions: 644
  content: |
    [Service]
    LimitMEMLOCK=infinity
- path: "/etc/systemd/system/docker.service.d/50-extra-options.conf"
  owner: root:root
  permissions: 644
  content: |
    [Service]
    Environment='DOCKER_OPTS=--userland-proxy=false --log-opt max-size=10m --log-opt max-file=5'
- path: "/opt/bin/srv_init.py"
  owner: root:root
  permissions: 750
  content: |
    import pip
    import os
    import json
    import logging
    import time

    LOG_PATH='/var/log'
    LOG_FILE='rancher_init.log'
    LOG_LEVEL=logging.DEBUG

    RANCHER_ENDPOINT = os.environ.get('RANCHER_ENDPOINT')
    RANCHER_ADMIN_NAME = os.environ.get('RANCHER_ADMIN_NAME')
    RANCHER_ADMIN_USERNAME = os.environ.get('RANCHER_ADMIN_USERNAME')
    RANCHER_ADMIN_PASSWORD = os.environ.get('RANCHER_ADMIN_PASSWORD')

    RANCHER_STASK_DIR_USER = '/opt/rancher/stacks/user'
    RANCHER_CERT_DIR = '/opt/rancher/cert'
    RANCHER_NFS_ENDPOINT = os.environ.get('RANCHER_NFS_ENDPOINT')
    RANCHER_NFS_ON_REMOVE = os.environ.get('RANCHER_NFS_ON_REMOVE')

    RANCHER_SUPPORTED_DOCKER_VERSIONS = "~v1.12.3 || ~v1.13.0 || ~v17.03.0 || ~v17.06.0 || ~v17.09.0"

    KV_CONSUL = 'consul'
    KV_ETCD = 'etcd'
    KV_DB = KV_CONSUL


    def install(package):
        pip.main(['install', package])


    try:
        import requests
    except ImportError:
        install('requests')
        import requests

    if KV_CONSUL == KV_ETCD:
        try:
            import etcd
        except ImportError:
            install('python-etcd')
            import etcd
    elif KV_CONSUL == KV_CONSUL:
        try:
            import consul
        except ImportError:
            install('python-consul')
            import consul


    def wait_for_rancher(rancher_url):
        url = os.path.join(rancher_url, 'v2-beta/localauthconfig')
        headers = {'Accept': 'application/json'}
        resp = None
        while not resp:
            try:
                r = requests.get(url, headers=headers)
                if r.status_code < 500:
                    _ = r.json()
                    resp = r.status_code
                else:
                    logging.info("Staus: %s" % r.status_code)
                    time.sleep(1)
            except requests.exceptions.ConnectionError:
                time.sleep(10)
                logging.info("Waiting for Rancher")
            except ValueError as e:
                time.sleep(1)
                logging.info("%s" % e)
        return resp


    def rancher_get_pid(rancher_url):
        url = os.path.join(rancher_url, 'v1/projects')
        headers = {'Accept': 'application/json'}
        code=None
        while code != 200:
            try:
                response = requests.get(url, headers=headers)
                logging.debug('Status code: %s' % response.status_code)
                _ = response.json()
                code = response.status_code
            except ValueError as e:
                time.sleep(1)
                logging.info("%s" % e)
        return response.json()['data'][0]['id']


    def rancher_get_tid(rancher_url, pid):
        url = os.path.join(rancher_url, 'v1/projects/%s/registrationTokens' % pid)
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.post(url, headers=headers)
        return response.json()['id']


    def rancher_get_registration_url(rancher_url, pid, tid):
        url = os.path.join(rancher_url, 'v1/projects/%s/registrationToken/%s' % (pid,tid))
        headers = {
            'Accept': 'application/json',
        }
        key_active = False
        res = None
        while not key_active:
            response = requests.get(url, headers=headers)
            if response.json()['state'] == 'active':
                key_active = True
                res = response.json()['registrationUrl']
            else:
                time.sleep(0.1)
        return res


    def rancher_create_access_key(rancher_url):
        url = os.path.join(rancher_url, 'v1/apikey')
        payload = {
            'description': 'Rancher init script',
            "name": "srv_init",
        }
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        key_id = response.json()['id']
        res = (response.json()['publicValue'], response.json()['secretValue'])
        key_active = False
        while not key_active:
            response = requests.get("%s/%s" % (url, key_id), headers=headers)
            if response.json()['state'] == 'active':
                key_active = True
            else:
                time.sleep(0.1)
        return res


    def rancher_add_certificate(rancher_url, pid, name, cert, key):
        url = os.path.join(rancher_url, 'v2-beta/projects/%s/certificates' % pid)
        payload = {
            "cert": cert,
            "key": key,
            "name": name
        }
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        return response.json()


    def rancher_settings_update(rancher_url, key, vaule):
        url = os.path.join(rancher_url, 'v2-beta/settings/%s' % key)
        payload = {
            "value": "%s" % vaule,
        }
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.put(url, headers=headers, data=json.dumps(payload))
        return response.json()


    def rancher_settings_get(rancher_url, key):
        url = os.path.join(rancher_url, 'v2-beta/settings/%s' % key)
        headers = {
            'Accept': 'application/json',
        }
        key_active = False
        res = None
        while not key_active:
            response = requests.get(url, headers=headers)
            if response.json()['type'] == "activeSetting":
                key_active = True
                res = response.json()['value']
            else:
                time.sleep(0.1)
        return res


    def rancher_add_catalog(rancher_url, catalog_name, catalog_url, catalog_branch='master'):
        cur_catalog = json.loads(rancher_settings_get(rancher_url, 'catalog.url'))
        item = {
            catalog_name: {
                'url': catalog_url,
                'branch': catalog_branch,
            }
        }
        cur_catalog['catalogs'].update(item)
        rancher_settings_update(rancher_url, 'catalog.url', json.dumps(cur_catalog))


    def rancher_set_local_auth_config(rancher_url, admin_name, admin_username, admin_password):
        url = os.path.join(rancher_url, 'v2-beta/localauthconfig')
        print(url)
        payload = {
            'type': 'localAuthConfig',
            'baseType': 'localAuthConfig',
            'accessMode': 'unrestricted',
            'enabled': True,
            'name': admin_name,
            'password': admin_password,
            'username': admin_username,
        }
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        print(response.text)
        return response.json()


    def fs_list_stacks(dir):
        if os.path.isdir(dir):
            return [o for o in os.listdir(dir)
                    if os.path.isdir(os.path.join(dir,o))
                    if os.path.isfile(os.path.join(dir, o, 'docker-compose.yml'))
                    if os.path.isfile(os.path.join(dir, o, 'rancher-compose.yml'))]
        else:
            return []


    def fs_list_certificates(dir):
        if os.path.isdir(dir):
            res = {}
            files = os.listdir(dir)
            keys = set(os.path.splitext(o)[0] for o in files)
            return [(key, '%s.crt' % key, '%s.key' % key) for key in keys if '%s.key' % key in files and '%s.crt' % key in files]
        else:
            return []


    def rancher_create_nfs_stack(rancher_url, access_key, access_key_secret, pid, start=False):
        SERVICE_TAG = 'v0.8.5'
        url = os.path.join(rancher_url, 'v2-beta/projects/%s/stacks' % pid)
        payload = {
            "system": True,
            "type": "stack",
            "name": "nfs",
            "startOnCreate": start,
            "environment": {
                "NFS_SERVER": "%s" % RANCHER_NFS_ENDPOINT,
                "ON_REMOVE": "%s" % RANCHER_NFS_ON_REMOVE,
                "MOUNT_DIR": "/nfs",
                "MOUNT_OPTS": "",
                "NFS_VERS": "nfsvers=4",
                "RANCHER_DEBUG": "false"
            },
            "dockerCompose": "version: '2'\nservices:\n  nfs-driver:\n    privileged: true\n    image: rancher/storage-nfs:%s\n    pid: host\n    labels:\n      io.rancher.scheduler.global: 'true'\n      io.rancher.container.create_agent: 'true'\n      io.rancher.container.dns: 'true'\n      io.rancher.container.agent.role: environment\n    environment:\n      NFS_SERVER: '${NFS_SERVER}'\n      MOUNT_DIR: '${MOUNT_DIR}'\n      ON_REMOVE: '${ON_REMOVE}'\n      MOUNT_OPTS: '${MOUNT_OPTS},${NFS_VERS}'\n    volumes:\n    - /run:/run\n    - /var/run:/var/run\n    - /dev:/host/dev\n    - /var/lib/rancher/volumes:/var/lib/rancher/volumes:shared\n    logging:\n      driver: json-file\n      options:\n        max-size: 25m\n        max-file: '2'\n" % SERVICE_TAG,
            "rancherCompose": ".catalog:\n  name: \"Rancher NFS\"\n  version: 0.4.0\n  description: |\n    Docker volume plugin for NFS\n  minimum_rancher_version: v1.6.6-rc1\n  questions:\n  - variable: \"NFS_SERVER\"\n    description: \"IP or hostname of the default NFS Server\"\n    label: \"NFS Server\"\n    required: true\n    type: \"string\"\n  - variable: \"MOUNT_DIR\"\n    label: \"Export Base Directory\"\n    description: \"The default exported base directory\"\n    type: \"string\"\n    required: true\n  - variable: \"MOUNT_OPTS\"\n    label: \"Mount Options\"\n    description: \"Comma delimited list of default mount options, for example: 'proto=udp'. Do not specify `nfsvers` option, it will be ignored.\"\n    type: \"string\"\n  - variable: \"NFS_VERS\"\n    label: NFS Version\n    description: Default NFS version to use\n    type: enum\n    required: true\n    default: nfsvers=4\n    options:\n    - nfsvers=4\n    - nfsvers=3\n  - variable: ON_REMOVE\n    label: On Remove\n    description: On removal of Rancher NFS volume, should the underlying data be retained or purged.\n    type: enum\n    required: true\n    default: purge\n    options:\n    - purge\n    - retain\n  - variable: RANCHER_DEBUG\n    label: Debug Mode\n    type: enum\n    description: Enable or disable verbose logging\n    default: false\n    options:\n    - true\n    - false\nnfs-driver:\n  storage_driver:\n    name: rancher-nfs\n    scope: environment\n    volume_access_mode: multiHostRW\n",
            "externalId": "catalog://library:infra*nfs:4"
        }
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.post(url, headers=headers, data=json.dumps(
            payload), auth=(access_key, access_key_secret))
        time.sleep(0.2)
        self_url = response.json()['links']['self']
        stack_name = response.json()['name']
        active = False
        while not active:
            response = requests.get(self_url, headers=headers, auth=(
                access_key, access_key_secret))
            if ('state' in response.json()) and (response.json()['state'] == 'active'):
                active = True
            else:
                logging.info('Waiting for stack: %s CODE: %s STATUS: %s' % (
                    stack_name, response.status_code, 'state' in response.json() and response.json()['state'] or '-'))
                time.sleep(0.2)
        return response.json()


    def rancher_create_stack(rancher_url, access_key, access_key_secret, pid, stack_dir, stack_name, stack_description=None, start=False, stack_system=False):
        url = os.path.join(rancher_url, 'v2-beta/projects/%s/stacks' % pid)
        payload = {
            "name": stack_name,
            "description": stack_description,
            "dockerCompose": open(os.path.join(stack_dir,stack_name,'docker-compose.yml'), 'r').read(),
            "rancherCompose": open(os.path.join(stack_dir,stack_name,'rancher-compose.yml'), 'r').read(),
            "startOnCreate": start,
            "system": stack_system,
        }
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        response = requests.post(url, headers=headers, data=json.dumps(payload), auth=(access_key, access_key_secret))
        time.sleep(0.2)
        self_url = response.json()['links']['self']
        stack_name = response.json()['name']
        active = False
        while not active:
            response = requests.get(self_url, headers=headers, auth=(access_key, access_key_secret))
            if ('state' in response.json()) and (response.json()['state'] == 'active'):
                active = True
            else:
                logging.info('Waiting for stack: %s CODE: %s STATUS: %s' % (stack_name, response.status_code, 'state' in response.json() and response.json()['state'] or '-' ))
                time.sleep(0.2)
        return response.json()

    if __name__ == '__main__':
        logFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
        rootLogger = logging.getLogger()

        fileHandler = logging.FileHandler("{0}/{1}.log".format(LOG_PATH, LOG_FILE))
        fileHandler.setFormatter(logFormatter)
        rootLogger.addHandler(fileHandler)

        consoleHandler = logging.StreamHandler()
        consoleHandler.setFormatter(logFormatter)
        rootLogger.addHandler(consoleHandler)

        rootLogger.setLevel(LOG_LEVEL)

        rancher_local_url = rancher_url = RANCHER_ENDPOINT
        logging.debug("Rancher URL: %s" % rancher_url)

        status_code = wait_for_rancher(rancher_local_url)
        if status_code == 200:
            try:
                if KV_CONSUL == KV_ETCD:
                    etcd_client = etcd.Client()
                elif KV_CONSUL == KV_CONSUL:
                    consul_client = consul.Consul()

                logging.info("Performing first time configuration")
                pid = rancher_get_pid(rancher_local_url)
                logging.debug('PID: %s' % pid)
                tid = rancher_get_tid(rancher_local_url, pid)
                logging.debug('TID: %s' % tid)

                rancher_settings_update(rancher_local_url, 'api.host', rancher_url)
                logging.debug('Updating setting: "api.host" = "%s"' % rancher_url)

                rancher_settings_update(rancher_url, 'supported.docker.range', RANCHER_SUPPORTED_DOCKER_VERSIONS)
                logging.debug('Updating setting: "supported.docker.range" = "%s"' % RANCHER_SUPPORTED_DOCKER_VERSIONS)

                rancher_add_catalog(rancher_local_url, 'V3', 'https://github.com/siemonster/v3-vmware')
                logging.debug('Adding Rancher catalog: %s: %s' % ('V3', 'https://github.com/siemonster/v3-vmware'))

                for cert_name, cert, key in fs_list_certificates(RANCHER_CERT_DIR):
                    logging.debug('Adding a certificate: %s' % cert)
                    with open(os.path.join(RANCHER_CERT_DIR, cert), 'r') as cert_fn, open(os.path.join(RANCHER_CERT_DIR, key), 'r') as key_fn:
                        rancher_add_certificate(rancher_local_url, pid, name=cert_name, cert=cert_fn.read(), key=key_fn.read())

                registration_url = rancher_get_registration_url(rancher_local_url, pid, tid)
                logging.debug('Registration URL: %s' % registration_url)

                access_key, access_key_secret = rancher_create_access_key(rancher_local_url)
                logging.debug('Created ACCESS_KEY: %s ACCESS_KEY_SECRET: %s' % (access_key, access_key_secret))

                time.sleep(60)
                logging.info('Creating nfs stack...')
                rancher_create_nfs_stack(rancher_local_url, access_key, access_key_secret, pid, start=True)

                for stack in fs_list_stacks(RANCHER_STASK_DIR_USER):
                    res = rancher_create_stack(rancher_local_url, access_key, access_key_secret, pid,
                                               RANCHER_STASK_DIR_USER, stack)
                    if res == 0:
                        logging.info('Creating user stack: %s ... OK' % stack)
                    else:
                        logging.error('Creating user stack: %s ... FAILED' % stack)

                resp = rancher_set_local_auth_config(rancher_local_url, RANCHER_ADMIN_NAME, RANCHER_ADMIN_USERNAME, RANCHER_ADMIN_PASSWORD)
                logging.debug('Set local auth config: %s' % resp)
                if registration_url:
                    if KV_CONSUL == KV_ETCD:
                        logging.info('Setting ETCD record...')
                        etcd_client.write('/services/rancher/mgmt', registration_url)
                    elif KV_CONSUL == KV_CONSUL:
                        logging.info('Setting Consul record...')
                        consul_client.kv.put('services/rancher/mgmt', registration_url)
                else:
                    logging.error('No registration URL')
                    raise ValueError('No registration URL')
            except Exception as e:
                logging.error("%s" % e)
                raise

        elif status_code == 401:
            logging.info("Rancher already configured")
- path: "/opt/bin/bootstrap.sh"
  owner: root:root
  permissions: 750
  content: |
    #!/bin/bash
    set -e

    RANCHER_ADMIN_NAME=admin
    RANCHER_ADMIN_USERNAME=admin
    RANCHER_ADMIN_PASSWORD=siemonster
    RANCHER_NFS_ON_REMOVE=purge

    AVAHI_DOCKER_IMAGE=registry.gitlab.com/dmitryint/siemonster-avahi-rancher:master
    #ETCD_DOCKER_IMAGE=quay.io/coreos/etcd:v2.3.8
    CONSUL_DOCKER_IMAGE=consul:1.0.0
    RANCHER_SERVER_DOCKER_IMAGE=rancher/server:v1.6.11
    RANCHER_AGENT_DOCKER_IMAGE=rancher/agent:v1.2.7

    BOOTSTRAP_EXPECT=5
    BOOTSTRAP_DIR=/etc/bootstrap

    CONSUL_PATH="services/rancher"

    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/bin

    join_by()
    {
        local IFS="$1"; shift; echo "$*";
    }

    if [ -f "/media/configdrive/docker_images" ]; then
        docker image load --input /media/configdrive/docker_images
    fi

    if [ ! -f "/opt/bin/consul-cli" ]; then
        curl -sSL https://github.com/mantl/consul-cli/releases/download/v0.3.1/consul-cli_0.3.1_linux_amd64.tar.gz | tar xvz --strip-components=1 -C /opt/bin/
    fi

    docker run --rm -i \
        --net=host \
        -v "${BOOTSTRAP_DIR}:/env" \
        -e "EXPECT_NODES=${BOOTSTRAP_EXPECT}" \
        ${AVAHI_DOCKER_IMAGE}

    source ${BOOTSTRAP_DIR}/self.env
    source ${BOOTSTRAP_DIR}/all_nodes.env
    IFS=', ' read -r -a entire_ips <<< "$ALL_NODES_IPS"
    IFS=', ' read -r -a entire_names <<< "$ALL_NODES_NAMES"
    IFS=', ' read -r -a node_all_ips <<< "$NODE_IP_ADDRESSES_LIST"

    entire=()
    for index in ${!entire_ips[*]}; do
        entire+=("-retry-join=${entire_ips[$index]}")
    done
    CONSUL_CLUSTER_NODES="$(join_by ' ' ${entire[@]})"

    port_mappings=()
    advertise_peer_urls=()
    for index in ${!node_all_ips[*]}; do
        port_mappings+=("-p ${node_all_ips[$index]}:8300-8302:8300-8302 -p ${node_all_ips[$index]}:8400:8400 -p ${node_all_ips[$index]}:8500:8500")
        advertise_peer_urls+=("-advertise=${node_all_ips[$index]}")
    done
    DOCKER_PORT_MAPS="$(join_by ' ' ${port_mappings[@]})"
    CONSUL_ADVERTISE_PEER_URLS="$(join_by ' ' ${advertise_peer_urls[@]})"

    echo "bootstrap: Starting Consul cluster..."
    docker ps -a | grep consul && docker rm -f consul
    docker run -d --name=consul \
      --restart=always \
      --net=host \
      ${CONSUL_DOCKER_IMAGE} agent -server \
      -node=${NODE_NAME} \
      ${CONSUL_ADVERTISE_PEER_URLS} \
      ${CONSUL_CLUSTER_NODES} \
      -bootstrap-expect=${BOOTSTRAP_EXPECT}

    #entire=()
    #for index in ${!entire_ips[*]}; do
    #    entire+=("${entire_names[$index]}=http://${entire_ips[$index]}:2380")
    #done
    #ETCD_CLUSTER_NODES="$(join_by , ${entire[@]})"

    #port_mappings=()
    #advertise_peer_urls=()
    #self_cluster_nodes=()
    #for index in ${!node_all_ips[*]}; do
    #    port_mappings+=("-p ${node_all_ips[$index]}:4001:4001 -p ${node_all_ips[$index]}:2380:2380 -p ${node_all_ips[$index]}:2379:2379")
    #    advertise_peer_urls+=("http://${node_all_ips[$index]}:2380")
    #    self_cluster_nodes+=(${NODE_NAME}=http://${node_all_ips[$index]}:2380)
    #done
    #DOCKER_PORT_MAPS="$(join_by ' ' ${port_mappings[@]})"
    #ETCD_ADVERTISE_PEER_URLS="$(join_by , ${advertise_peer_urls[@]})"
    #ETCD_SELF_CLUSTER_NODES="$(join_by , ${self_cluster_nodes[@]})"

    #echo "bootstrap: Starting ETCD cluster..."
    #docker ps -a | grep etcd-rancher-cluster && docker rm -f etcd-rancher-cluster
    #docker run -d --name=etcd-rancher-cluster \
    #    --restart=always \
    #    ${DOCKER_PORT_MAPS} \
    #    -p 127.0.0.1:4001:4001 -p 127.0.0.1:2380:2380 -p 127.0.0.1:2379:2379 \
    #    ${ETCD_DOCKER_IMAGE} \
    #    -name "${NODE_NAME}" \
    #    -advertise-client-urls http://${NODE_IP_ADDRESS}:2379,http://${NODE_IP_ADDRESS}:4001 \
    #    -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
    #    -initial-advertise-peer-urls ${ETCD_ADVERTISE_PEER_URLS} \
    #    -listen-peer-urls http://0.0.0.0:2380 \
    #    -initial-cluster-token etcd-rancher-cluster-1 \
    #    -initial-cluster "${ETCD_SELF_CLUSTER_NODES},${ETCD_CLUSTER_NODES}" \
    #    -initial-cluster-state new


    # Check that ETCD cluster is healthy
    #until $(/usr/bin/etcdctl cluster-health 2>&1 >/dev/null); do
    #    echo "bootstrap: Waiting until the cluster rises."
    #    sleep 1
    #done

    until [ "$(curl -s http://localhost:8500/v1/status/leader)" == "\"\"" ]; do
        echo "bootstrap: Waiting until the cluster rises."
        sleep 1
    done

    mkdir -p /etc/motd.d

    if [ -z "$(consul-cli kv read ${CONSUL_PATH}/setupComplete >/dev/null 2>&1)" ]; then
        if consul-cli kv write ${CONSUL_PATH}/setupLock 1 --modifyindex="0"  >/dev/null 2>&1 ; then
            echo "bootstrap: obtained the lock to proceed with setting up."

            hostnamectl set-hostname makara

            mkdir -p /nfs
            echo "/nfs    ${NODE_NETMASK}(rw,async,no_wdelay,crossmnt,insecure,all_squash,insecure_locks,sec=sys,anonuid=0,anongid=0)" > /etc/exports
            systemctl enable nfs-server
            systemctl start nfs-server

            echo "RANCHER_ADMIN_NAME=${RANCHER_ADMIN_NAME}" > /etc/rancher_server.env
            echo "RANCHER_ADMIN_USERNAME=${RANCHER_ADMIN_USERNAME}" >>/etc/rancher_server.env
            echo "RANCHER_ADMIN_PASSWORD=${RANCHER_ADMIN_PASSWORD}" >>/etc/rancher_server.env
            echo "RANCHER_NFS_ENDPOINT=${NODE_IP_ADDRESS}" >>/etc/rancher_server.env
            echo "RANCHER_NFS_ON_REMOVE=${RANCHER_NFS_ON_REMOVE}" >>/etc/rancher_server.env
            echo "RANCHER_ENDPOINT=http://${NODE_IP_ADDRESS}:8080" >>/etc/rancher_server.env
            echo "Rancher URL: http://${NODE_IP_ADDRESS}:8080">>/etc/motd.d/rancher.conf
            /usr/lib/coreos/motdgen

            docker run -d -p 8080:8080 --restart=always --name rancher-mgmt ${RANCHER_SERVER_DOCKER_IMAGE}

            export `cat /etc/rancher_server.env`
            /opt/bin/python /opt/bin/srv_init.py

            consul-cli kv write ${CONSUL_PATH}/rancher_endpoint "${RANCHER_ENDPOINT}" >/dev/null
            consul-cli kv write ${CONSUL_PATH}/setupComplete youBetcha >/dev/null

            RANCHER_REGISTRATION_URL=$(consul-cli kv read ${CONSUL_PATH}/mgmt)
            echo 'RANCHER_LABELS=makara=1' >/etc/rancher_agent.env
            echo "CATTLE_AGENT_IP=${NODE_IP_ADDRESS}" >>/etc/rancher_agent.env
            echo "RANCHER_REGISTRATION_URL=${RANCHER_REGISTRATION_URL}" >>/etc/rancher_agent.env

            export `cat /etc/rancher_agent.env`
            docker run --rm --privileged \
                -e CATTLE_AGENT_IP=$CATTLE_AGENT_IP \
                -e CATTLE_HOST_LABELS=$RANCHER_LABELS \
                --name rancher-agent-launch \
                -v /var/run/docker.sock:/var/run/docker.sock \
                ${RANCHER_AGENT_DOCKER_IMAGE} \
                ${RANCHER_REGISTRATION_URL}

            exit 0
        fi
    fi

    until [ "$(consul-cli kv read ${CONSUL_PATH}/setupComplete 2>&1)" == "youBetcha" ] ; do
        echo "bootstrap: waiting for Rancher server..."
        sleep 5
    done

    RANCHER_REGISTRATION_URL=$(consul-cli kv read ${CONSUL_PATH}/mgmt)
    RANCHER_ENDPOINT=$(consul-cli kv read ${CONSUL_PATH}/rancher_endpoint)

    echo "Rancher URL: ${RANCHER_ENDPOINT}">>/etc/motd.d/rancher.conf
    /usr/lib/coreos/motdgen

    declare -A labels=( ["capricorn"]='capricorn=1' ["proteus"]='proteus=1' ["kraken"]='kraken=1' ["tiamat"]='tiamat=1')

    for key in "${!labels[@]}"
    do
        if consul-cli kv write ${CONSUL_PATH}/labels/$key ${NODE_NAME} --modifyindex="0" >/dev/null 2>&1; then
            echo "RANCHER_LABELS=${labels[$key]}" >/etc/rancher_agent.env
            echo "CATTLE_AGENT_IP=${NODE_IP_ADDRESS}" >>/etc/rancher_agent.env
            echo "RANCHER_REGISTRATION_URL=${RANCHER_REGISTRATION_URL}" >>/etc/rancher_agent.env

            hostnamectl set-hostname $key

            export `cat /etc/rancher_agent.env`
            docker run --rm --privileged \
                -e CATTLE_AGENT_IP=$CATTLE_AGENT_IP \
                -e CATTLE_HOST_LABELS=$RANCHER_LABELS \
                --name rancher-agent-launch \
                -v /var/run/docker.sock:/var/run/docker.sock \
                ${RANCHER_AGENT_DOCKER_IMAGE} \
                ${RANCHER_REGISTRATION_URL}
            exit 0
       fi
    done

coreos:
  update:
    group: stable
    reboot-strategy: off

  units:
    - name: 20-disable-ipv6.network
      content: |
        [Match]
        Name=e*
        [Network]
        LinkLocalAddressing=no
        IPv6AcceptRA=no
        DHCP=yes

    - name: update-engine.service
      command: stop
      runtime: false
      enable: false

    - name: systemd-networkd.service
      command: restart

    - name: nfs-server.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=NFS server and services
        Requires= network.target proc-fs-nfsd.mount rpcbind.target
        Requires= nfs-mountd.service
        Wants=rpc-statd.service nfs-idmapd.service
        Wants=rpc-statd-notify.service

        After= network.target proc-fs-nfsd.mount rpcbind.target nfs-mountd.service
        After= nfs-idmapd.service rpc-statd.service
        Before= rpc-statd-notify.service

        # GSS services dependencies and ordering
        Wants=auth-rpcgss-module.service
        After=rpc-gssd.service gssproxy.service rpc-svcgssd.service
        ConditionFileNotEmpty=/etc/exports

        [Service]

        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/sbin/exportfs -r
        ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS
        ExecStop=/usr/sbin/rpc.nfsd 0
        ExecStopPost=/usr/sbin/exportfs -au
        ExecStopPost=/usr/sbin/exportfs -f

        ExecReload=/usr/sbin/exportfs -r

        [Install]
        WantedBy=multi-user.target

    - name: etcd2.service
      runtime: false
      enable: false

    - name: fleet.service
      runtime: false
      enable: false

    - name: systemd-sysctl.service
      command: restart

    - name: docker.service
      command: restart

    - name: install-pypy.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Install PyPy
        ConditionPathExists=!/opt/pypy/bin/pypy
        [Service]
        TimeoutStartSec=0
        Type=oneshot
        RemainAfterExit=true
        WorkingDirectory=/opt
        ExecStartPre=/usr/bin/sh -c "wget https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux64.tar.bz2"
        ExecStartPre=/usr/bin/sh -c "tar -xjf pypy2-v5.7.1-linux64.tar.bz2"
        ExecStartPre=/usr/bin/sh -c "ln -fs /lib64/libncurses.so.5.9 /opt/pypy2-v5.7.1-linux64/bin/libtinfo.so.5"
        ExecStartPre=/usr/bin/sh -c "mv pypy2-v5.7.1-linux64 pypy"
        ExecStartPre=/usr/bin/sh -c "curl -O https://bootstrap.pypa.io/get-pip.py"
        ExecStartPre=/usr/bin/sh -c "LD_LIBRARY_PATH=/opt/pypy/bin /opt/pypy/bin/pypy get-pip.py"
        ExecStart=/usr/bin/sh -c "echo Done!"
        [Install]
        WantedBy=multi-user.target

    - name: bootstrap.service
      command: start
      runtime: false
      content: |
        [Unit]
        Description=Bootstrap Service
        After=docker.service
        Requires=docker.service
        ConditionPathExists=!/etc/rancher_agent.env

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c "/opt/bin/bootstrap.sh"